[{"F:\\Documents\\repos\\weather-react\\src\\pages\\WeatherPage\\index.js":"1","F:\\Documents\\repos\\weather-react\\src\\components\\WeatherCard\\index.js":"2","F:\\Documents\\repos\\weather-react\\src\\components\\MyIcon\\index.js":"3"},{"size":1961,"mtime":1606609666320,"results":"4","hashOfConfig":"5"},{"size":6576,"mtime":1606610399071,"results":"6","hashOfConfig":"5"},{"size":334,"mtime":1606604064723,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"83r50a",{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Documents\\repos\\weather-react\\src\\pages\\WeatherPage\\index.js",["15"],"F:\\Documents\\repos\\weather-react\\src\\components\\WeatherCard\\index.js",["16","17","18","19","20"],"import {\r\n  Card,\r\n  CardHeader,\r\n  CardMedia,\r\n  CardContent,\r\n  CardActions,\r\n  Collapse,\r\n  Avatar,\r\n  IconButton,\r\n  Typography,\r\n  Divider,\r\n  Grid,\r\n  Box,\r\n  SvgIcon,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { blue, red } from \"@material-ui/core/colors\";\r\nimport moment from \"moment\";\r\nimport clsx from \"clsx\";\r\n\r\nimport InvertColorsIcon from \"@material-ui/icons/InvertColors\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { FaTemperatureLow, FaTemperatureHigh } from \"react-icons/fa\";\r\nimport { FiSunrise, FiSunset } from \"react-icons/fi\";\r\n\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend } from \"recharts\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MyIcon from \"../MyIcon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: \"100%\",\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"56.25%\", // 16:9\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    margin: \"0 auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n  },\r\n}));\r\n\r\nconst TempGraph = ({ temp, feelsLike }) => {\r\n  const data = [\r\n    { name: \"Morning\", temp: temp.morn, feelsLike: feelsLike.morn },\r\n    { name: \"Day\", temp: temp.day, feelsLike: feelsLike.day },\r\n    { name: \"Evening\", temp: temp.eve, feelsLike: feelsLike.eve },\r\n    { name: \"Night\", temp: temp.night, feelsLike: feelsLike.night },\r\n  ];\r\n\r\n  return (\r\n    <Box my={3}>\r\n      <LineChart width={350} height={200} data={data}>\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n        <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#2980b9\" strokeWidth={3} />\r\n        <Line type=\"monotone\" dataKey=\"feelsLike\" stroke=\"#1abc9c\" strokeWidth={3} />\r\n        <Legend formatter={(value, entry, index) => (value === \"temp\" ? \"Temperature\" : \"Feels like\")} />\r\n      </LineChart>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst WeatherCard = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    clouds,\r\n    deg,\r\n    dt,\r\n    feels_like: feelsLike,\r\n    humidity,\r\n    pop,\r\n    pressure,\r\n    speed,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    weather,\r\n  } = data;\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar\r\n            className={classes.avatar}\r\n            src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\r\n            alt=\"weather icon\"\r\n          />\r\n        }\r\n        title={<Typography variant=\"h5\">{moment(new Date(dt * 1000)).format(\"dddd Do\")}</Typography>}\r\n        subheader={<Typography variant=\"h6\">{`${weather[0].main}`}</Typography>}\r\n      />\r\n\r\n      <CardContent>\r\n        <Box mb={3}>\r\n          <Typography variant=\"h6\">Condition: {weather[0].description}</Typography>\r\n        </Box>\r\n        <Grid container>\r\n          <Grid item xs={4}>\r\n            <MyIcon icon={FaTemperatureLow} label={`${temp.min}°C`} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <MyIcon icon={FaTemperatureHigh} label={`${temp.max}°C`} />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <MyIcon icon={<InvertColorsIcon />} label={`${pop * 100}%`} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"more details\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n          <Grid container>\r\n            <Grid item xs={6}>\r\n              <MyIcon label={`${moment(new Date(sunrise * 1000)).format(\"h:mm:ss A\")}`} icon={FiSunrise} />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <MyIcon label={`${moment(new Date(sunset * 1000)).format(\"h:mm:ss A\")}`} icon={FiSunset} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Box>\r\n            <TempGraph temp={temp} feelsLike={feelsLike} />\r\n          </Box>\r\n\r\n          <Box my={3}>\r\n            <Typography variant=\"h6\">Weather Description</Typography>\r\n            <Grid container>\r\n              <Grid xs={6} item>\r\n                <Typography>Pressure: {pressure / 1000} atm</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Humidity: {humidity}%</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Clouds: {clouds}%</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Wind speed: {speed}km/h</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n\r\n          <Box my={3}>\r\n            <Typography variant=\"h6\">Temperatures</Typography>\r\n            <Grid container>\r\n              <Grid xs={6} item>\r\n                <Typography>Morning: {temp.morn}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Day: {temp.day}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Evening: {temp.eve}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Night: {temp.night}°C</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n\r\n          <Box my={3}>\r\n            <Typography variant=\"h6\">Feels like</Typography>\r\n            <Grid container>\r\n              <Grid xs={6} item>\r\n                <Typography>Morning: {feelsLike.morn}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Day: {feelsLike.day}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Evening: {feelsLike.eve}°C</Typography>\r\n              </Grid>\r\n              <Grid xs={6} item>\r\n                <Typography>Night: {feelsLike.night}°C</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","F:\\Documents\\repos\\weather-react\\src\\components\\MyIcon\\index.js",[],{"ruleId":"21","severity":1,"message":"22","line":31,"column":6,"nodeType":"23","endLine":31,"endColumn":8,"suggestions":"24"},{"ruleId":"25","severity":1,"message":"26","line":4,"column":3,"nodeType":"27","messageId":"28","endLine":4,"endColumn":12},{"ruleId":"25","severity":1,"message":"29","line":11,"column":3,"nodeType":"27","messageId":"28","endLine":11,"endColumn":10},{"ruleId":"25","severity":1,"message":"30","line":14,"column":3,"nodeType":"27","messageId":"28","endLine":14,"endColumn":10},{"ruleId":"25","severity":1,"message":"31","line":17,"column":16,"nodeType":"27","messageId":"28","endLine":17,"endColumn":19},{"ruleId":"25","severity":1,"message":"32","line":82,"column":5,"nodeType":"27","messageId":"28","endLine":82,"endColumn":8},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setInputText'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-unused-vars","'CardMedia' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'SvgIcon' is defined but never used.","'red' is defined but never used.","'deg' is assigned a value but never used.",{"desc":"34","fix":"35"},"Update the dependencies array to be: [setInputText]",{"range":"36","text":"37"},[1087,1089],"[setInputText]"]